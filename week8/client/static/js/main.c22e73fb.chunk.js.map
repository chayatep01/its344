{"version":3,"sources":["registerServiceWorker.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleStartStopPress","bind","assertThisInitialized","handleClearPress","second","running","_this2","clearInterval","increment","setState","setInterval","button","react_default","a","createElement","StopButton","onClick","StartButton","ClearButton","Component","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c22e73fb.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleStartStopPress = this.handleStartStopPress.bind(this);\r\n    this.handleClearPress = this.handleClearPress.bind(this);\r\n    this.state = {\r\n      second: 0,\r\n      running: false\r\n    }\r\n  }\r\n\r\n  handleStartStopPress() {\r\n    // if watch is running clear interval and set running to false\r\n    if (this.state.running != false) {\r\n      clearInterval(this.increment)\r\n      this.setState({\r\n        running: false\r\n      })\r\n    }\r\n\r\n    // if wathc is NOT running, set interval to increment second by 1 every 1000 ms and set running to true\r\n    else {\r\n      this.setState({running: true})\r\n      this.increment = setInterval(() => {\r\n        this.setState({second: this.state.second += 1,})\r\n      },1000)\r\n    }\r\n    \r\n  }\r\n\r\n  handleClearPress() {\r\n    // if watch is running, do nothing\r\n    if (this.state.running == true) {}\r\n\r\n    // if watch is NOT running, set second to 0\r\n    else {\r\n      this.setState({\r\n        second: 0\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    // follow the LoginControl example\r\n    const isRunning = this.state.running;\r\n    let button;\r\n\r\n    if (!isRunning) {\r\n      button = <StartButton onClick={this.handleStartStopPress} />;\r\n    } else {\r\n      button = <StopButton onClick={this.handleStartStopPress} />;\r\n    }\r\n    return (\r\n      <div>\r\n        <h2>The watch second is {this.state.second}</h2>\r\n        {button}\r\n        <ClearButton onClick={this.handleClearPress}/>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nfunction StartButton(props) {\r\n  return (\r\n    <button onClick={props.onClick}>\r\n      Start\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction StopButton(props) {\r\n  return (\r\n    <button onClick={props.onClick}>\r\n      Stop\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction ClearButton(props) {\r\n  return (\r\n    <button onClick={props.onClick}>\r\n      Clear\r\n    </button>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}